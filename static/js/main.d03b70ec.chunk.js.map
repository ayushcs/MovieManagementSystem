{"version":3,"sources":["features/SetDetails.js","features/ListEvents.js","features/FetchData.js","features/MyList.js","redux/movieReducers.js","redux/store.js","App.js","index.js"],"names":["SetDetails","props","dispatch","useDispatch","useState","alreadyAddedInList","setAddedList","currentState","useSelector","state","useEffect","Object","keys","movies","length","mode","listArray","filter","item","list","find","index","imdbID","watchArray","watched","listDetails","map","response","border","movie","key","list_mode","className","type","value","data-index","id","onChange","e","checked","ids_details","current_value","el","handleInput","target","dataset","Poster","width","src","alt","Title","Year","error","removesFromExisting","visibleList","selectedRows","action","fetchedRemovedList","fetchAddedList","currentList","curData","currentArray","lookup","curIndex","name","push","addFromExisting","addRemoveFromExisting","addList","removeList","watchedList","myList","FetchData","axios","get","year_filter","then","res","movieDetails","data","Search","Response","undefined","Error","catch","options","createOption","to","disabled","onClick","MyList","title","initialState","moviesReducers","store","createStore","movieReducers","composeWithDevTools","applyMiddleware","logger","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d03b70ec.chunk.js","sourcesContent":["// for creating the tables whereever needed\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'\r\n\r\nfunction SetDetails (props) {\r\n    const dispatch = useDispatch();\r\n    const [alreadyAddedInList, setAddedList] = useState([]);\r\n    const currentState = useSelector(state=> state);\r\n    const handleInput = (value, checked, index) => {\r\n        if (checked) {\r\n            dispatch({type: 'ADD_IDS',  ids_details: props.movies[index]}) \r\n        } else {\r\n            currentState.ids_details.map((id, index)=>{\r\n                if (id.imdbID === value) {\r\n                    currentState.ids_details[index] = null\r\n                }\r\n            })\r\n            var current_value = currentState.ids_details.filter(function (el) {\r\n                return el != null;\r\n            });\r\n            dispatch({type: 'REMOVE_IDS', ids_details: current_value});\r\n        }\r\n    } \r\n\r\n    useEffect(() => {\r\n        if (Object.keys(props.movies).length != 0  && props.mode === 'movie') {\r\n            var listArray = props.movies.filter(item => currentState.list.find(index => index.imdbID === item.imdbID));\r\n            var watchArray = props.movies.filter(item => currentState.watched.find(index => index.imdbID === item.imdbID));\r\n            var listDetails = [];\r\n            listArray.map((item) => {\r\n                listDetails[item.imdbID] = 'fa fa-list';\r\n            });\r\n            watchArray.map((item) => {\r\n                listDetails[item.imdbID] = 'fa fa-clock-o';\r\n            });\r\n            // doesn't need to save data for the listDetails\r\n            setAddedList(listDetails);\r\n        }\r\n    }, []);\r\n\r\n\r\n    if (props.response === \"True\") {\r\n        return (\r\n            <table border=\"1\">\r\n                <thead>\r\n                    <tr> \r\n                        <th>Add</th>\r\n                        <th>Poster</th>\r\n                        <th>Title </th>\r\n                        <th>Year</th>     \r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.movies.map((movie, index) => {\r\n                            return (\r\n                                <tr key={movie.imdbID + currentState.list_mode}>\r\n                                    <td className=\"align_middle\">\r\n                                        {\r\n                                            alreadyAddedInList[movie.imdbID] ? <div className=\"badge\"><i className={alreadyAddedInList[movie.imdbID]}></i></div>\r\n                                            : <input type=\"checkbox\" value={movie.imdbID} data-index={index} id={movie.imdbID} onChange={e => handleInput(e.target.value, e.target.checked, e.target.dataset.index)}/>\r\n                                        }\r\n                                    </td>\r\n                                    <td className=\"align_middle\">\r\n                                        {(movie.Poster === 'N/A') ? 'No Image in Api' : <img width=\"100\" src={movie.Poster} alt=\"Poster\" />}\r\n                                    </td>\r\n                                    <td>{movie.Title}</td>\r\n                                    <td>{movie.Year}</td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        )\r\n    } else {\r\n        return (<div className=\"align_middle\">{currentState.error}</div>)\r\n    }\r\n}\r\nexport default SetDetails\r\n","// contains the list handle functions\r\nexport const removesFromExisting = (visibleList, selectedRows, dispatch, action) => {\r\n    dispatch({type: action, list: fetchedRemovedList(visibleList, selectedRows)});\r\n}\r\n\r\nconst fetchedRemovedList = (visibleList, selectedRows) =>{\r\n    var currentList = visibleList.filter(item => !selectedRows.find(index => index.imdbID === item.imdbID));\r\n    return currentList;\r\n}\r\n\r\nconst fetchAddedList = (visibleList, selectedRows) => {\r\n    var currentList = [];\r\n    if (visibleList.length !== 0) {\r\n        var currentArray=[...visibleList,...selectedRows];\r\n        var lookup = {};\r\n        for (var curData, curIndex = 0; curData = currentArray[curIndex++];) {\r\n            var name = curData.imdbID;\r\n            if (!(name in lookup)) {\r\n                lookup[name] = 1;\r\n                currentList.push(curData);\r\n            }\r\n        }\r\n    } else {\r\n        currentList = selectedRows;\r\n    }\r\n    return currentList;\r\n}\r\n\r\nexport const addFromExisting = (visibleList, selectedRows, dispatch, action) => {\r\n    dispatch({type: action, list: fetchAddedList(visibleList, selectedRows)});\r\n}\r\n\r\nexport const addRemoveFromExisting = (addList, selectedRows, removeList, dispatch, action) => {\r\n    var currentList = fetchAddedList(addList, selectedRows);\r\n    var removedList = fetchedRemovedList(removeList, selectedRows)\r\n    dispatch({type: action, watchedList: currentList , myList: removedList});\r\n}\r\n\r\n\r\nexport default {removesFromExisting, addFromExisting, addRemoveFromExisting};","import React, {useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {useSelector, useDispatch } from 'react-redux'\r\nimport SetDetails from './SetDetails';\r\nimport {addFromExisting} from './ListEvents';\r\n\r\n// Create option only for once as needed statically\r\nconst createOption = () => {\r\n    var options = [];\r\n    for (var index = 2000; index < 2021; index ++) {\r\n        options.push(<option key={index} value={index}>Filter On The Basis of {index} Year</option>);\r\n    }\r\n    return options;\r\n}\r\n\r\nfunction FetchData() {\r\n    const state = useSelector(state=> state);\r\n    const dispatch = useDispatch();\r\n\r\n    // call useeffect for the data fetching only when year changed \r\n    useEffect(() => {\r\n        axios.get('https://www.omdbapi.com/?apikey=32395055&type=movie&s=bad&y='+state.year_filter)\r\n            .then(res => {\r\n                dispatch({type: 'FETCH_SUCCESS',movieDetails: res.data.Search, response: res.data.Response, error: (res.data.Error !== undefined) ? res.data.Error: ''});\r\n            })\r\n            .catch(e => {\r\n                dispatch({type: 'FETCH_ERROR', error: 'Something Went wrong', response: 'False'});\r\n            })\r\n    }, [state.year_filter])\r\n\r\n    var handle = (value) => {\r\n        dispatch({type:'YEAR_FILTER', year_filter: value})\r\n    }\r\n\r\n    return (\r\n            <div className=\"screen\">\r\n                {state.response === 'True' ?\r\n                    <div className=\"select_container align_middle\">\r\n                        <select value={state.year_filter} onChange = {e=>handle(e.target.value)}>\r\n                            <option value=\"\">Clear Filter</option>\r\n                            {createOption()}\r\n                        </select>\r\n                        {state.year_filter !== '' ? <div className=\"filter\">Data on the basis of {state.year_filter}</div> : ''}\r\n                    </div> \r\n                : null}\r\n                <div className=\"movie_details\">\r\n                    <SetDetails movies={state.movies} response={state.response} mode='movie'/>\r\n                </div>\r\n                {state.response === 'True' ?\r\n                    <div className=\"align_middle\">\r\n                        <Link to=\"./list\">\r\n                            <button className=\"btn-primary\" disabled={state.ids_details.length === 0} onClick={()=>addFromExisting(state.list, state.ids_details ,dispatch, 'ADD_LIST')}>Add To My list</button>\r\n                        </Link>\r\n                        <Link to=\"./list\">\r\n                            <button className=\"btn-primary\" disabled={state.ids_details.length === 0} onClick={()=>addFromExisting(state.watched, state.ids_details ,dispatch, 'ADD_WATCHED')}>Add To Watched List </button>\r\n                        </Link>\r\n                    </div>\r\n                : null }\r\n\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default FetchData\r\n","import React from 'react';\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport SetDetails from './SetDetails';\r\nimport {Link} from 'react-router-dom';\r\nimport {removesFromExisting, addRemoveFromExisting} from './ListEvents';\r\n\r\nfunction MyList() {\r\n    const currentState = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n\r\n    var list = currentState.list_mode ? currentState.list : currentState.watched\r\n    const handleMode = (value) => {\r\n        dispatch({type:'LIST_MODE', mode: value})\r\n    }\r\n    return (\r\n        <div className=\"screen\">\r\n            <div className=\"toggle_btn\" title={currentState.list_mode ? 'Toggle in My Watched List' : 'Toggle in My List'}>\r\n                <div className=\"toggle_label\">{currentState.list_mode ? 'Toggle in My Watched List' : 'Toggle in My List'}</div>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" onChange={e=>handleMode(e.target.checked)} checked={currentState.list_mode}/>\r\n                    <span className=\"slider round\"></span>\r\n                </label>\r\n            </div>\r\n            <h1 className=\"align_middle\">My { !currentState.list_mode ? 'Watched ' : ''}List</h1>\r\n            { (list.length !== 0) ? \r\n                <div>\r\n                    <SetDetails movies={list} response={currentState.response} mode='list'/> \r\n                    <div className=\"align_middle\">\r\n                        { currentState.list_mode ? \r\n                            <div>\r\n                                <Link to=\"./list\">\r\n                                    <button className=\"btn-primary\" disabled={currentState.ids_details.length === 0} onClick={()=>removesFromExisting(currentState.list, currentState.ids_details ,dispatch, 'REMOVE_LIST')}>Remove From My list</button>\r\n                                </Link>\r\n                                <Link to=\"./list\">\r\n                                    <button className=\"btn-primary\" disabled={currentState.ids_details.length === 0} onClick={()=>addRemoveFromExisting(currentState.watched, currentState.ids_details ,currentState.list, dispatch, 'ADD_FROM_LIST')}>Add To Watched List </button>\r\n                                </Link>\r\n                            </div>\r\n                        :   \r\n                            <Link to=\"./list\">\r\n                                <button className=\"btn-primary\" disabled={currentState.ids_details.length === 0} onClick={()=>removesFromExisting(currentState.watched, currentState.ids_details ,dispatch, 'REMOVED_WATCHED')}>Remove From My Watched list</button>\r\n                            </Link>\r\n                        }\r\n                    </div>\r\n                </div> \r\n                : <div className=\"align_middle\">Add Movies into My { !currentState.list_mode ? 'Watched List From Movie List or My List' : 'List From Movie List'}</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyList\r\n","const initialState = {\r\n    movies: {},\r\n    error: '',\r\n    response: 'False',\r\n    watched: [],\r\n    list: [],\r\n    list_mode: true,\r\n    ids_details: [],\r\n    year_filter: '', \r\n}\r\n\r\nconst moviesReducers = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'FETCH_SUCCESS' : return {\r\n            ...state,\r\n            movies: action.movieDetails,\r\n            response: action.response,\r\n            error: action.error\r\n        }\r\n        case 'FETCH_ERROR' : return {\r\n            ...state,\r\n            response: action.response,\r\n            error: action.error,\r\n        }\r\n        case 'ADD_IDS' : return {\r\n            ...state,\r\n            ids_details: [...state.ids_details, action.ids_details],\r\n        }\r\n        case 'ADD_LIST':\r\n        case 'REMOVE_LIST': return {\r\n            ...state,\r\n            ids_details: [],\r\n            list_mode: true,\r\n            list: action.list\r\n        }\r\n        case 'ADD_WATCHED' :\r\n        case 'REMOVED_WATCHED': return {\r\n            ...state,\r\n            ids_details: [],\r\n            list_mode: false,\r\n            watched: action.list\r\n        }\r\n        case 'REMOVE_IDS' : return {\r\n            ...state,\r\n            ids_details: action.ids_details\r\n        }\r\n        case 'YEAR_FILTER' : return {\r\n            ...state,\r\n            year_filter: action.year_filter\r\n        }\r\n        case 'LIST_MODE' : return {\r\n            ...state,\r\n            list_mode: action.mode\r\n        }\r\n        case 'ADD_FROM_LIST': return {\r\n            ...state,\r\n            ids_details: [],\r\n            watched: action.watchedList,\r\n            list: action.myList,\r\n            list_mode: false,\r\n        }\r\n        default : return state\r\n    }\r\n}\r\nexport default moviesReducers","import {createStore,applyMiddleware} from 'redux'\r\nimport logger from 'redux-logger'\r\nimport movieReducers from './movieReducers'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nconst store = createStore(movieReducers, composeWithDevTools(applyMiddleware(logger)));\r\n\r\nexport default store","import React from 'react';\r\nimport FetchData from './features/FetchData';\r\nimport MyList from './features/MyList';\r\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n        <Router>\r\n            <div className=\"App\">\r\n                <nav className=\"navigation\">\r\n                    <ul>\r\n                        <Link to=\"./\">\r\n                            <li>Movie list</li>\r\n                        </Link>\r\n                        <Link to=\"./list\">\r\n                            <li>My List</li>\r\n                        </Link>\r\n                    </ul>\r\n                </nav>\r\n                <Switch>\r\n                    <Route path='/MovieManagementSystem/' exact component={FetchData} />\r\n                    <Route path='/MovieManagementSystem/list' component={MyList} />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}